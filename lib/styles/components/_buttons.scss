/*-------------------------------------------
   	Buttons!!!!

   	Table of Contents:

   	1. Button styles
   	2. Making customing buttons
   	3. Button groups
   	4. Drop down buttons
   	5. Form buttons (input and button HTML)

-------------------------------------------*/



/* ==========================================================================
	!  Button Styles
	========================================================================== */


// We use these to build padding for buttons.
$button-med:            emCalc(12px) !default;
$button-tny:              emCalc(7px) !default;
$button-sml:             emCalc(9px) !default;
$button-lrg:              emCalc(16px) !default;

// We use this to control the display property.
$button-display:          inline-block !default;
$button-margin-bottom:    emCalc(20px) !default;

// We use these to control button text styles.
$button-font-family:      inherit !default;
$button-font-color:       #fff !default;
$button-font-color-alt:   #333 !default;
$button-font-med:         emCalc(16px) !default;
$button-font-tny:         emCalc(11px) !default;
$button-font-sml:         emCalc(13px) !default;
$button-font-lrg:         emCalc(20px) !default;
$button-font-weight:      bold !default;
$button-font-align:       center !default;

// We use these to control various hover effects.
$button-function-factor:  10% !default;

// We use these to control button border styles.
$button-border-width:     1px !default;
$button-border-style:     solid !default;
$button-border-color:     darken($primary-color, $button-function-factor) !default;

// We use this to set the default radius used throughout the core.
$button-radius:           4px !default;
$button-round:            1000px !default;

// We use this to set default opacity for disabled buttons.
$button-disabled-opacity: 0.6 !default;


//
// Button Mixins
//

// We use this mixin to create a default button base.
@mixin button-base($style:true, $display:$button-display) {
  @if $style {
    border-style: $button-border-style;
    border-width: $button-border-width;
    cursor: pointer;
    font-family: $button-font-family;
    font-weight: $button-font-weight;
    line-height: 1;
    margin: 0 0 $button-margin-bottom;
    position: relative;
    text-decoration: none;
    text-align: $button-font-align;
  }
  @if $display { display: $display; }
}

// We use this mixin to add button size styles
@mixin button-size($padding:$button-med, $full-width:false, $is-input:false) {

  // We control which padding styles come through,
  // these can be turned off by setting $padding:false
  @if $padding {
    padding-top: $padding;
    padding-right: $padding * 2;
    padding-bottom: $padding + emCalc(1px);
    padding-left: $padding * 2;

    // We control the font-size based on mixin input.
    @if      $padding == $button-med { font-size: $button-font-med; }
    @else if $padding == $button-tny { font-size: $button-font-tny; }
    @else if $padding == $button-sml { font-size: $button-font-sml; }
    @else if $padding == $button-lrg { font-size: $button-font-lrg; }
    @else                     { font-size: $padding - emCalc(2px); }
  }

  // We can set $full-width:true to remove side padding extend width.
  @if $full-width {
    // We still need to check if $padding is set.
    @if $padding {
	  padding-top: $padding;
	  padding-bottom: $padding + emCalc(1px);
    } @else if $padding == false {
      padding-top:0;
      padding-bottom:0;
    }
    padding-right: 0px;
    padding-left: 0px;
    width: 100%;
  }

  // <input>'s and <button>'s take on strange padding. We added this to help fix that.
  @if $is-input == $button-lrg {
    padding-top: $is-input + emCalc(.5px);
    padding-bottom: $is-input + emCalc(.5px);
  }
  @else if $is-input {
    padding-top: $is-input + emCalc(1px);
    padding-bottom: $is-input;
  }
}

// We use this mixin to add button color styles
@mixin button-style($bg:$primary-color, $radius:false, $disabled:false) {

  // We control which background styles are used,
  // these can be removed by setting $bg:false
  @if $bg {
    // This find the lightness percentage of the background color.
    $bg-lightness: lightness($bg);

    background-color: $bg;
    border-color: darken($bg, $button-function-factor);
    &:hover,
    &:focus { background-color: darken($bg, $button-function-factor); }

    // We control the text color for you based on the background color.
    @if $bg-lightness > 70% {
      color: $button-font-color-alt;
      &:hover,
      &:focus { color: $button-font-color-alt; }
    }
    @else {
      color: $button-font-color;
      &:hover,
      &:focus { color: $button-font-color; }
    }
  }

  // We can set $disabled:true to create a disabled transparent button.
  @if $disabled {
    cursor: pointer;
    opacity: $button-disabled-opacity;
    -webkit-box-shadow: none;
    box-shadow: none;
    &:hover,
    &:focus { background-color: $bg; }
  }

  // We can control how much button radius us used.
  @if $radius == true { @include border-radius($button-radius); }
  @else if $radius { @include border-radius($radius); }

}

// We use this to quickly create buttons with a single mixin. As @jaredhardy puts it, "the kitchen sink mixin"
@mixin button($padding:$button-med, $bg:$primary-color, $radius:false, $full-width:false, $disabled:false, $is-input:false, $is-prefix:false) {
  @include button-base;
  @include button-size($padding, $full-width, $is-input);
  @include button-style($bg, $radius, $disabled);
}


//
// Button Classes
//

// Only include these classes if the variable is true, otherwise they'll be left out.

  // Default styles applied outside of media query
  button, .button {
    @include button-base;
    @include button-size;
    @include button-style;

    &.secondary { @include button-style($bg:#ddd); }

    &.large  { @include button-size($padding:$button-lrg); }
    &.small  { @include button-size($padding:$button-sml); }
    &.tiny   { @include button-size($padding:$button-tny); }
    &.expand { @include button-size($padding:null,$full-width:true); }

    &.left-align  { text-align: left; text-indent: emCalc(12px); }
    &.right-align { text-align: right; padding-right: emCalc(12px); }

    &.disabled, &[disabled] { @include button-style($bg:$primary-color, $disabled:true);
      &.secondary { @include button-style($bg:#ddd, $disabled:true); }
    }

  }

  button, .button {
    @include button-size($padding:false, $is-input:$button-med);
    &.tiny { @include button-size($padding:false, $is-input:$button-tny); }
    &.small { @include button-size($padding:false, $is-input:$button-sml); }
    &.large { @include button-size($padding:false, $is-input:$button-lrg); }
  }

  // Styles for any browser or device that support media queries
  @media only screen {

    button, .button {
      @include box-shadow(inset 0 1px 0 rgba(255,255,255, .5));
      @include single-transition(background-color);

      &.large  { @include button-size($padding:false, $full-width:false); }
      &.small  { @include button-size($padding:false, $full-width:false); }
      &.tiny   { @include button-size($padding:false, $full-width:false); }

      &.radius { @include button-style($bg:false, $radius:true); }
      &.round  { @include button-style($bg:false, $radius:$button-round); }
    }

  }

  // Additional styles for screens larger than 768px
  @media #{$small} {

    button, .button {
      @include button-base($style:false, $display:inline-block);
      @include button-size($padding:false, $full-width:false);
    }

  }



/* ==========================================================================
	!  Custom Button Styles

	Custom button styles, like different colors and sizes, are REALLY easy to make with Foundation.  Use SASS to create new
	styles instead.

	Here's the variables you can do:

		.your-class-name {
		  @include button($padding, $bg, $radius, $full-width, $disabled, $is-input);
		}

	And here's an example of what that looks like in use:

	.your-class-name {
		@include button($button-sml, #ddd, true, false, false, true);
	}


	========================================================================== */

	.your-button-class {
	  @include button($button-sml, #ddd, true, false, false, true);
	}


/* ==========================================================================
	!  Button Groups
	========================================================================== */


$button-bar-margin-opposite: emCalc(10px) !default;

//
// Button Group Mixins
//

// We use this to add styles for a button group container
@mixin button-group-container($styles:true, $float:false) {
  @if $styles {
    list-style: none;
    margin: 0;
    @include clearfix();
  }
  @if $float {
    float: left;
    margin-right: $button-bar-margin-opposite;
    & div { overflow: hidden; }
  }
}

// We use this to control styles for button groups
@mixin button-group-style($radius:false, $even:false, $float:left) {

  // We use this to control the flow, or remove those styles completely.
  @if $float {
    margin: 0 0 0 -1px;
    float: $float;
    // Make sure the first child doesn't get the negative margin.
    &:first-child { margin-left: 0; }
  }

  // We use these to control left and right radius on first/last buttons in the group.
  @if $radius == true {
    &:first-child,
    &:first-child > a,
    &:first-child > button,
    &:first-child > .button { @include side-radius(left, $button-radius); }
    &:last-child,
    &:last-child > a,
    &:last-child > button,
    &:last-child > .button { @include side-radius(right, $button-radius); }
  }
  @else if $radius {
    &:first-child,
    &:first-child > a,
    &:first-child > button,
    &:first-child > .button { @include side-radius(left, $radius); }
    &:last-child,
    &:last-child > a,
    &:last-child > button,
    &:last-child > .button { @include side-radius(right, $radius); }
  }

  // We use this to make the buttons even width across their container
  @if $even {
    width: percentage((100/$even) / 100);
    button, .button { width: 100%; }
  }

}

  /* Button Groups */
  .button-group { @include button-group-container;

    &> * { @include button-group-style(); }

    &.radius > * { @include button-group-style($radius:$button-radius, $float:null); }
    &.round > * { @include button-group-style($radius:$button-round, $float:null); }

    @for $i from 2 through 8 {
      &.even#{-$i} li { @include button-group-style($even:$i, $float:null); }
    }
  }

  .button-bar {
    @include clearfix;
    .button-group { @include button-group-container($styles:false,$float:true); }
  }





/* ==========================================================================
	!  Dropdown Buttons
	========================================================================== */


//
// Dropdown Button Variables
//

// We use these to set the color of the pip in dropdown buttons
$dropdown-button-pip-color:     #fff !default;
$dropdown-button-pip-color-alt: #333 !default;

// We use these to style tiny dropdown buttons
$dropdown-button-padding-tny:   $button-tny * 5 !default;
$dropdown-button-pip-size-tny:  $button-tny !default;
$dropdown-button-pip-opposite-tny: $button-tny * 2 !default;
$dropdown-button-pip-top-tny:   -$button-tny / 2 + emCalc(1px) !default;

// We use these to style small dropdown buttons
$dropdown-button-padding-sml:   $button-sml * 5 !default;
$dropdown-button-pip-size-sml:  $button-sml !default;
$dropdown-button-pip-opposite-sml: $button-sml * 2 !default;
$dropdown-button-pip-top-sml:   -$button-sml / 2 + emCalc(1px) !default;

// We use these to style medium dropdown buttons
$dropdown-button-padding-med:   $button-med * 4 + emCalc(3px) !default;
$dropdown-button-pip-size-med:  $button-med - emCalc(3px) !default;
$dropdown-button-pip-opposite-med: $button-med * 2 !default;
$dropdown-button-pip-top-med:   -$button-med / 2 + emCalc(2px) !default;

// We use these to style large dropdown buttons
$dropdown-button-padding-lrg:   $button-lrg * 4 !default;
$dropdown-button-pip-size-lrg:  $button-lrg - emCalc(6px) !default;
$dropdown-button-pip-opposite-lrg: $button-lrg + emCalc(12px) !default;
$dropdown-button-pip-top-lrg:   -$button-lrg / 2 + emCalc(3px) !default;

//
// Dropdown Button Mixin
//

// We use this mixin to build off of the button mixin and add dropdown button styles
@mixin dropdown-button($padding:medium, $pip-color:#fff, $base-style:true) {

  // We add in base styles, but they can be negated by setting to 'false'.
  @if $base-style {
    position: relative;

    // This creates the base styles for the triangle pip
    &:before {
      position: absolute;
      content: "";
      width: 0;
      height: 0;
      display: block;
      border-style: solid;
      border-color: $dropdown-button-pip-color transparent transparent transparent;
      top: 50%;
    }
  }

  // If we're dealing with tiny buttons, use these styles
  @if $padding == tiny {
    padding-right: $dropdown-button-padding-tny;
    &:before {
      border-width: $dropdown-button-pip-size-tny;
      right: $dropdown-button-pip-opposite-tny;
      margin-top: $dropdown-button-pip-top-tny;
    }
  }

  // If we're dealing with small buttons, use these styles
  @if $padding == small {
    padding-right: $dropdown-button-padding-sml;
    &:before {
      border-width: $dropdown-button-pip-size-sml;
      right: $dropdown-button-pip-opposite-sml;
      margin-top: $dropdown-button-pip-top-sml;
    }
  }

  // If we're dealing with default (medium) buttons, use these styles
  @if $padding == medium {
    padding-right: $dropdown-button-padding-med;
    &:before {
      border-width: $dropdown-button-pip-size-med;
      right: $dropdown-button-pip-opposite-med;
      margin-top: $dropdown-button-pip-top-med;
    }
  }

  // If we're dealing with large buttons, use these styles
  @if $padding == large {
    padding-right: $dropdown-button-padding-lrg;
    &:before {
      border-width: $dropdown-button-pip-size-lrg;
      right: $dropdown-button-pip-opposite-lrg;
      margin-top: $dropdown-button-pip-top-lrg;
    }
  }

  // We can control the pip color. We didn't use logic in this case, just set it and forget it.
  @if $pip-color {
    &:before { border-color: $pip-color transparent transparent transparent; }
  }
}



  /* Dropdown Button */
  .dropdown.button { @include dropdown-button;
    &.tiny { @include dropdown-button(tiny,$base-style:false); }
    &.small { @include dropdown-button(small,$base-style:false); }
    &.large { @include dropdown-button(large,$base-style:false); }
    &.secondary:before { border-color: $dropdown-button-pip-color-alt transparent transparent transparent; }
  }



//
// Dropdown Variables
//

// We use these to controls height and width styles.
$f-dropdown-max-width:            200px !default;
$f-dropdown-height:               auto !default;
$f-dropdown-max-height:           none !default;
$f-dropdown-margin-top:           2px !default;

// We use this to control the background color
$f-dropdown-bg:                   #fff !default;

// We use this to set the border styles for dropdowns.
$f-dropdown-border-style:         solid !default;
$f-dropdown-border-width:         1px !default;
$f-dropdown-border-color:         darken(#fff, 20%) !default;

// We use these to style the triangle pip.
$f-dropdown-triangle-size:        6px !default;
$f-dropdown-triangle-color:       #fff !default;
$f-dropdown-triangle-side-offset: 10px !default;

// We use these to control styles for the list elements.
$f-dropdown-list-style:           none !default;
$f-dropdown-font-color:           #555 !default;
$f-dropdown-font-size:            emCalc(14px) !default;
$f-dropdown-list-padding:         emCalc(5px) emCalc(10px) !default;
$f-dropdown-line-height:          emCalc(18px) !default;
$f-dropdown-list-hover-bg:        #eeeeee !default;
$dropdown-mobile-default-float:            0 !default;

// We use this to control the styles for when the dropdown has custom content.
$f-dropdown-content-padding:      emCalc(20px) !default;

//
// Dropdown Mixins
//

// NOTE: Make default max-width change between list and content types. Can add more width with classes, maybe .small, .medium, .large, etc.;

// We use this to style the dropdown container element.
@mixin dropdown-container($content:list, $triangle:true, $max-width:$f-dropdown-max-width) {
  position: absolute;
  top: -9999px;
  list-style: $f-dropdown-list-style;

  *:first-child { margin-top: 0; }
  *:last-child { margin-bottom: 0; }

  @if $content == list {
    width: 100%;
    max-height: $f-dropdown-max-height;
    height: $f-dropdown-height;
    background: $f-dropdown-bg;
    border: $f-dropdown-border-style $f-dropdown-border-width $f-dropdown-border-color;
    font-size: $em-base;
    z-index: 99;
  }
  @else if $content == content {
    padding: $f-dropdown-content-padding;
    width: 100%;
    height: $f-dropdown-height;
    max-height: $f-dropdown-max-height;
    background: $f-dropdown-bg;
    border: $f-dropdown-border-style $f-dropdown-border-width $f-dropdown-border-color;
    font-size: $em-base;
    z-index: 99;
  }

  @if $triangle {
    margin-top: $f-dropdown-margin-top;

    &:before {
      @include css-triangle($f-dropdown-triangle-size, $f-dropdown-triangle-color, bottom);
      position: absolute;
      top: -($f-dropdown-triangle-size * 2);
      left: $f-dropdown-triangle-side-offset;
      z-index: 99;
    }
    &:after {
      @include css-triangle($f-dropdown-triangle-size + 1, $f-dropdown-border-color, bottom);
      position: absolute;
      top: -(($f-dropdown-triangle-size + 1) * 2);
      left: $f-dropdown-triangle-side-offset - 1;
      z-index: 98;
    }

    &.right:before {
      left: auto;
      right: $f-dropdown-triangle-side-offset;
    }
    &.right:after {
      left: auto;
      right: $f-dropdown-triangle-side-offset - 1;
    }
  }

  @if $max-width { max-width: $max-width; }
  @else { max-width: $f-dropdown-max-width; }

}

// We use this to style the list elements or content inside the dropdown.
@mixin dropdown-style {
  font-size: $f-dropdown-font-size;
  cursor: pointer;

  line-height: $f-dropdown-line-height;
  margin: 0;

  &:hover,
  &:focus { background: $f-dropdown-list-hover-bg; }

  a {
    display: block;
    padding: $f-dropdown-list-padding;
    color: $f-dropdown-font-color;
  }
}



  @media only screen and (max-width: 767px) {
    .f-dropdown {
      max-width: 100%;
      left: $dropdown-mobile-default-float;
    }
  }

  /* Foundation Dropdowns */
  .f-dropdown {
    @include dropdown-container(content);

    li { @include dropdown-style; }

    &.content { @include dropdown-container(content, $triangle:false); }

    // Sizes
    &.tiny    { max-width: 200px; }
    &.small   { max-width: 300px; }
    &.medium  { max-width: 500px; }
    &.large   { max-width: 800px; }
  }








/* ==========================================================================
	!  Form Buttons
	========================================================================== */

	input[type="button"],
	input[type="submit"],
	input[type="reset"],
	button {
		@include button($button-sml, #ddd, true, false, false, true);

	}
